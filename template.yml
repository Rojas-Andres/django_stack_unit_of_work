AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Cluster with Fargate and Load Balancer

Parameters:
  Environment:
    Description: Description
    Type: AWS::SSM::Parameter::Value<String>
    Default: EnvironmentBTI
  BucketName:
    Description: Description
    Type: AWS::SSM::Parameter::Value<String>
    Default: BucketNameBTI
  StackName:
    Description: Description
    Type: AWS::SSM::Parameter::Value<String>
    Default: StackNameBTI
  VPCId:
    Description: Description
    Type: AWS::SSM::Parameter::Value<String>
    Default: VPCIdBTI
  PublicSubnetOne:
    Description: Description
    Type: AWS::SSM::Parameter::Value<String>
    Default: PublicSubnetOneBTI
  PublicSubnetTwo:
    Description: PublicSubnetTwo
    Type: AWS::SSM::Parameter::Value<String>
    Default: PublicSubnetTwoBTI
  PrivateSubnetOne:
    Description: Description
    Type: AWS::SSM::Parameter::Value<String>
    Default: PrivateSubnetOneBTI
  PrivateSubnetTwo:
    Description: PrivateSubnetTwo
    Type: AWS::SSM::Parameter::Value<String>
    Default: PrivateSubnetTwoBTI
  ArnCertificateACM:
    Description: PublicSubnetTwo
    Type: AWS::SSM::Parameter::Value<String>
    Default: ArnCertificateACMBTI
  EcrRepositoryDjango:
    Description: Description
    Type: AWS::SSM::Parameter::Value<String>
    Default: EcrRepositoryDjangoBTI

Resources:

  IngressAPILogTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${StackName}-${Environment}-IngressAPILogTable"
      AttributeDefinitions:
        - AttributeName: "service_name"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "S"
        - AttributeName: "http_method"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "service_name"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "HttpMethodIndex"
          KeySchema:
            - AttributeName: "http_method"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: "Environment"
          Value: !Ref Environment

  EgressAPILogTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${StackName}-${Environment}-EgressAPILogTable"
      AttributeDefinitions:
        - AttributeName: "service_name"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "S"
        - AttributeName: "http_method"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "service_name"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "HttpMethodIndex"
          KeySchema:
            - AttributeName: "http_method"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: "Environment"
          Value: !Ref Environment


  BucketS3InputDataAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketName}-s3-assets-${Environment}"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
              - POST
              - PUT
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            MaxAge: 300
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  OriginAccessIdentityBucketIDP:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Origin Access Identity for Bucket IDP"

  BucketIDPAssetsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketS3InputDataAssets
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentityBucketIDP.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "${BucketS3InputDataAssets.Arn}/*"
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentityBucketIDP.S3CanonicalUserId
            Action:
              - "s3:GetBucket*"
              - "s3:GetObject*"
              - "s3:List*"
            Resource:
              - !Sub "${BucketS3InputDataAssets.Arn}"
              - !Sub "${BucketS3InputDataAssets.Arn}/*"

  DistributionBucketIDP:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt BucketS3InputDataAssets.DomainName
            Id: "S3Origin"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentityBucketIDP}"
        DefaultCacheBehavior:
          TargetOriginId: "S3Origin"
          ViewerProtocolPolicy: "redirect-to-https"
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
        Enabled: true


  PrivateDnsNamespaceVpc:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub ${StackName}${Environment}PrivateDnsNamespace
      Vpc: !Ref VPCId
      Description: "Private DNS namespace for tutorial service discovery"


  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${StackName}${Environment}EcsCluster"


  EcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - dynamodb:CreateTable
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: "*"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic on port 8080, 8081, 443
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${StackName}${Environment}ALB"
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing


  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            ContentType: text/plain
            MessageBody: 'OK'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref ArnCertificateACM
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupDjango

  ####  Django SERVICE CONFIGURATION

  TaskDefinitionDjango:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${StackName}${Environment}TaskFamilyDjango"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "2048"
      Memory: "4096"
      ExecutionRoleArn: !GetAtt EcsExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsExecutionRole.Arn
      ContainerDefinitions:
        - Name: api-django
          Image: !Ref EcrRepositoryDjango
          Cpu: 0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupDjango
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: tcp
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:8000/healtcheck/ || exit 1"
            Interval: 60
            Timeout: 30
            Retries: 3
            StartPeriod: 30
          Environment:
            - Name: ENV_AWS_BUCKET_NAME
              Value: !Sub "${BucketName}-s3-assets-${Environment}"
            - Name: REGION_BUCKET
              Value: !Ref AWS::Region
            - Name: ENV_AWS_REGION
              Value: !Ref AWS::Region
            - Name: CLOUDFRONT_URL
              Value: !Sub "https://${DistributionBucketIDP.DomainName}"
            - Name: BUCKET_NAME
              Value: !Sub "${BucketName}-s3-assets-${Environment}"
            - Name: DYNAMODB_INGRESS_API_LOG_TABLE_NAME
              Value: !Ref IngressAPILogTable
            - Name: DYNAMODB_EGRESS_API_LOG_TABLE_NAME
              Value: !Ref EgressAPILogTable

  TargetGroupDjango:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${StackName}TGDjango"
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /healtcheck/
      # HealthCheckIntervalSeconds: 60  # Intervalo de 60 segundos entre comprobaciones
      # HealthCheckTimeoutSeconds: 15  # Tiempo de espera para cada comprobación de salud
      # UnhealthyThresholdCount: 3      # Número de fallos consecutivos antes de marcar como no saludable
      # HealthyThresholdCount: 5       # Número de éxitos consecutivos antes de marcar como saludable

  ListenerDjango:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8000
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupDjango

  PrivateDnsServiceDjango:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Sub "${StackName}${Environment}DjangoService"
      NamespaceId: !Ref PrivateDnsNamespaceVpc
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1


  FargateServiceDjango:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerDjango
      - TargetGroupDjango
    Properties:
      ServiceName: !Sub "${StackName}${Environment}DjangoService"
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinitionDjango
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
          SecurityGroups:
            - !Ref SecurityGroup
          AssignPublicIp: ENABLED
      ServiceRegistries:
        - RegistryArn: !GetAtt PrivateDnsServiceDjango.Arn
          ContainerName: api-django
      LoadBalancers:
        - ContainerName: api-django
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroupDjango
      EnableExecuteCommand: true

  LogGroupDjango:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${StackName}${Environment}EcsClusterDjango"
      RetentionInDays: 14
